file%3A%2F%2F%2Fhome%2Frenghen%2Fworkspace%2Fscala%2Fnative%2Fncurces101-zio%2Fsrc%2Fmain%2Fscala%2Fncurses101%2FNcurses.scala:7: error: ; expected but : found
object Ncurses:
              ^
occurred in the presentation compiler.

action parameters:
uri: file://<WORKSPACE>/src/main/scala/ncurses101/Ncurses.scala
text:
package ncurses101

import scala.scalanative.unsafe.{CChar, CInt, CShort, CString, CStruct0, CVarArg, Ptr, extern, link, name}

@link("ncurses")
@extern
object Ncurses:
  import Ncursesh.*

  @name("initscr")
  def initialzeScreen(): Ptr[Window] = extern

  def printw(str: CString): CInt = extern

  def refresh(): CInt = extern

  def clear(): Unit = extern

  @name("curs_set")
  def setCursorVisibility(visibility: CursorVisibility): CInt = extern

  @name("newwin")
  def newWindow(
      nlines: Int,
      ncols: Int,
      begin_y: Int,
      begin_x: Int,
    ): Ptr[Window] = extern

  @name("delwin")
  def deleteWindow(window: Ptr[Window]): Unit = extern

  @name("endwin")
  def endWindow(): Unit = extern

  @name("werase")
  def eraseWindow(window: Ptr[Window]): CInt = extern

  @name("wnoutrefresh")
  def refreshWindow(window: Ptr[Window]): CInt = extern

  def doupdate(): CInt = extern

  def box(
      window: Ptr[Window],
      verch: ChType,
      horch: ChType,
    ): CInt = extern

  @name("mvwprintw")
  def printFormatted(
      window: Ptr[Window],
      y: CInt,
      x: CInt,
      fmt: CString,
      args: CVarArg*,
    ): CInt = extern

  @name("mvwaddch")
  def printChar(
      window: Ptr[Window],
      y: CInt,
      x: CInt,
      ch: ChType,
    ): CInt =
    extern

  @name("mvwvline")
  def printLine(
      WINDwindow: Ptr[Window],
      y: CInt,
      x: CInt,
      ch: ChType,
      n: CInt,
    ): CInt = extern

  def noecho(): Unit = extern

  def getch(): CInt = extern

  def timeout(delay: CInt): Unit = extern

  @name("has_colors")
  def hasColors(): Boolean = extern

  @name("start_color")
  def startColor(): Unit = extern

  @name("use_default_colors")
  def useDefaultColors(): Unit = extern

  @name("wattron")
  def attributeOn(window: Ptr[Window], attribute: Attribute): CInt = extern

  @name("wattroff")
  def attributeOff(window: Ptr[Window], attribute: Attribute): CInt = extern

  @name("init_pair")
  def initPair(
      pair: CShort,
      foreground: Color,
      background: Color,
    ): CInt =
    extern

  @name("COLOR_PAIR")
  def colorPair0(pair: CShort): CInt = extern

  @name("getmaxx")
  def getmaxx0(window: Ptr[Window]): Int = extern

  @name("getmaxy")
  def getmaxy0(window: Ptr[Window]): Int = extern

  def stdscr: Ptr[Window] = extern
end Ncurses



error stacktrace:
scala.meta.internal.parsers.Reporter.syntaxError(Reporter.scala:16)
	scala.meta.internal.parsers.Reporter.syntaxError$(Reporter.scala:16)
	scala.meta.internal.parsers.Reporter$$anon$1.syntaxError(Reporter.scala:22)
	scala.meta.internal.parsers.Reporter.syntaxError(Reporter.scala:17)
	scala.meta.internal.parsers.Reporter.syntaxError$(Reporter.scala:17)
	scala.meta.internal.parsers.Reporter$$anon$1.syntaxError(Reporter.scala:22)
	scala.meta.internal.parsers.ScalametaParser.syntaxErrorExpected(ScalametaParser.scala:367)
	scala.meta.internal.parsers.ScalametaParser.expect(ScalametaParser.scala:369)
	scala.meta.internal.parsers.ScalametaParser.accept(ScalametaParser.scala:373)
	scala.meta.internal.parsers.ScalametaParser.acceptStatSep(ScalametaParser.scala:389)
	scala.meta.internal.parsers.ScalametaParser.acceptStatSepOpt(ScalametaParser.scala:393)
	scala.meta.internal.parsers.ScalametaParser.statSeqBuf(ScalametaParser.scala:4357)
	scala.meta.internal.parsers.ScalametaParser.bracelessPackageStats$1(ScalametaParser.scala:4579)
	scala.meta.internal.parsers.ScalametaParser.$anonfun$batchSource$11(ScalametaParser.scala:4590)
	scala.meta.internal.parsers.ScalametaParser.autoEndPos(ScalametaParser.scala:349)
	scala.meta.internal.parsers.ScalametaParser.$anonfun$batchSource$10(ScalametaParser.scala:4590)
	scala.meta.internal.parsers.ScalametaParser.tryParse(ScalametaParser.scala:201)
	scala.meta.internal.parsers.ScalametaParser.$anonfun$batchSource$1(ScalametaParser.scala:4582)
	scala.meta.internal.parsers.ScalametaParser.atPos(ScalametaParser.scala:300)
	scala.meta.internal.parsers.ScalametaParser.autoPos(ScalametaParser.scala:346)
	scala.meta.internal.parsers.ScalametaParser.batchSource(ScalametaParser.scala:4550)
	scala.meta.internal.parsers.ScalametaParser.$anonfun$source$1(ScalametaParser.scala:4543)
	scala.meta.internal.parsers.ScalametaParser.atPos(ScalametaParser.scala:300)
	scala.meta.internal.parsers.ScalametaParser.autoPos(ScalametaParser.scala:346)
	scala.meta.internal.parsers.ScalametaParser.source(ScalametaParser.scala:4543)
	scala.meta.internal.parsers.ScalametaParser.entrypointSource(ScalametaParser.scala:4548)
	scala.meta.internal.parsers.ScalametaParser.parseSourceImpl(ScalametaParser.scala:127)
	scala.meta.internal.parsers.ScalametaParser.$anonfun$parseSource$1(ScalametaParser.scala:124)
	scala.meta.internal.parsers.ScalametaParser.parseRuleAfterBOF(ScalametaParser.scala:51)
	scala.meta.internal.parsers.ScalametaParser.parseRule(ScalametaParser.scala:46)
	scala.meta.internal.parsers.ScalametaParser.parseSource(ScalametaParser.scala:124)
	scala.meta.parsers.Parse$.$anonfun$parseSource$1(Parse.scala:29)
	scala.meta.parsers.Parse$$anon$1.apply(Parse.scala:36)
	scala.meta.parsers.Api$XtensionParseDialectInput.parse(Api.scala:25)
	scala.meta.internal.semanticdb.scalac.ParseOps$XtensionCompilationUnitSource.toSource(ParseOps.scala:17)
	scala.meta.internal.semanticdb.scalac.TextDocumentOps$XtensionCompilationUnitDocument.toTextDocument(TextDocumentOps.scala:206)
	scala.meta.internal.pc.SemanticdbTextDocumentProvider.textDocument(SemanticdbTextDocumentProvider.scala:54)
	scala.meta.internal.pc.ScalaPresentationCompiler.$anonfun$semanticdbTextDocument$1(ScalaPresentationCompiler.scala:350)
